import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class productos {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Gestión de Tienda Online");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.getContentPane().add(new TiendaPanel());
            frame.pack();
            frame.setVisible(true);
        });
    }
}

class Producto {
    protected String nombre;
    protected String descripcion;
    protected double precio;
    protected int cantidadInventario;

    public Producto(String nombre, String descripcion, double precio, int cantidadInventario) {
        this.nombre = nombre;
        this.descripcion = descripcion;
        this.precio = precio;
        this.cantidadInventario = cantidadInventario;
    }
}

class Telefono extends Producto {
    public Telefono(String nombre, String descripcion, double precio, int cantidadInventario) {
        super(nombre, descripcion, precio, cantidadInventario);
    }
}

class Laptop extends Producto {
    public Laptop(String nombre, String descripcion, double precio, int cantidadInventario) {
        super(nombre, descripcion, precio, cantidadInventario);
    }
}

class Accesorio extends Producto {
    public Accesorio(String nombre, String descripcion, double precio, int cantidadInventario) {
        super(nombre, descripcion, precio, cantidadInventario);
    }
}

class Cliente {
    protected String nombre;
    protected String direccionEnvio;
    private List<Pedido> pedidos;

    public Cliente(String nombre, String direccionEnvio) {
        this.nombre = nombre;
        this.direccionEnvio = direccionEnvio;
        this.pedidos = new ArrayList<>();
    }

    public void realizarPedido(Pedido pedido) {
        this.pedidos.add(pedido);
    }

    public List<Pedido> getPedidos() {
        return pedidos;
    }
}

class Pedido {
    private Cliente cliente;
    private List<ProductoPedido> productosPedidos;

    public Pedido(Cliente cliente) {
        this.cliente = cliente;
        this.productosPedidos = new ArrayList<>();
    }

    public void agregarProducto(Producto producto, int cantidad) {
        ProductoPedido productoPedido = new ProductoPedido(producto, cantidad);
        this.productosPedidos.add(productoPedido);
    }

    public void procesarPedido(Inventario inventario) {
        for (ProductoPedido productoPedido : productosPedidos) {
            Producto producto = productoPedido.getProducto();
            int cantidadPedido = productoPedido.getCantidad();

            if (inventario.verificarInventario(producto, cantidadPedido)) {
                inventario.actualizarInventario(producto, cantidadPedido);
            } else {
                System.out.println("No hay suficiente inventario para el producto: " + producto.nombre);
            }
        }
    }

    public List<ProductoPedido> getProductosPedidos() {
        return productosPedidos;
    }

    public Cliente getCliente() {
        return cliente;
    }
}

class ProductoPedido {
    private Producto producto;
    private int cantidad;

    public ProductoPedido(Producto producto, int cantidad) {
        this.producto = producto;
        this.cantidad = cantidad;
    }

    public Producto getProducto() {
        return producto;
    }

    public int getCantidad() {
        return cantidad;
    }
}

class Inventario {
    private List<Producto> productos;
    private List<Cliente> clientes;

    public Inventario() {
        this.productos = new ArrayList<>();
        this.clientes = new ArrayList<>();
    }

    public void agregarProducto(Producto producto) {
        this.productos.add(producto);
    }

    public void agregarCliente(Cliente cliente) {
        this.clientes.add(cliente);
    }

    public boolean verificarInventario(Producto producto, int cantidad) {
        for (Producto p : productos) {
            if (p.equals(producto) && p.cantidadInventario >= cantidad) {
                return true;
            }
        }
        return false;
    }

    public void actualizarInventario(Producto producto, int cantidad) {
        for (Producto p : productos) {
            if (p.equals(producto)) {
                p.cantidadInventario -= cantidad;
                break;
            }
        }
    }

    public List<Producto> getProductos() {
        return productos;
    }

    public List<Cliente> getClientes() {
        return clientes;
    }

    // Nuevo método para obtener los pedidos
    public List<Pedido> getPedidos() {
        List<Pedido> pedidos = new ArrayList<>();
        for (Cliente cliente : clientes) {
            pedidos.addAll(cliente.getPedidos());
        }
        return pedidos;
    }
}

class TiendaPanel extends JPanel {
    private Inventario inventario;
    private JTextArea textAreaResultado;

    public TiendaPanel() {
        this.inventario = new Inventario();
        inicializarInterfaz();
    }

    private void inicializarInterfaz() {
        JButton agregarProductoButton = new JButton("Agregar Producto");
        agregarProductoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Abrir un cuadro de diálogo para ingresar información del producto
                String nombre = JOptionPane.showInputDialog("Ingrese el nombre del producto:");
                String descripcion = JOptionPane.showInputDialog("Ingrese la descripción del producto:");
                double precio = Double.parseDouble(JOptionPane.showInputDialog("Ingrese el precio del producto:"));
                int cantidad = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la cantidad en inventario:"));

                Producto nuevoProducto = new Producto(nombre, descripcion, precio, cantidad);
                inventario.agregarProducto(nuevoProducto);

                // Muestra el resultado en el área de texto
                textAreaResultado.append("Producto agregado al inventario: " + nuevoProducto.nombre + "\n");

                // Actualiza la información de los pedidos al lado
                mostrarPedidosAlLado();
            }
        });

        JButton agregarPedidoButton = new JButton("Agregar Pedido");
        agregarPedidoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Abrir un cuadro de diálogo para ingresar información del pedido
                String nombreCliente = JOptionPane.showInputDialog("Ingrese el nombre del cliente:");
                String direccionEnvio = JOptionPane.showInputDialog("Ingrese la dirección de envío:");

                Cliente cliente = new Cliente(nombreCliente, direccionEnvio);
                inventario.agregarCliente(cliente);

                Pedido pedido = new Pedido(cliente);

                // Agregar productos al pedido
                String respuesta;
                do {
                    String nombreProducto = JOptionPane.showInputDialog("Ingrese el nombre del producto:");
                    int cantidadProducto = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la cantidad del producto:"));

                    // Buscar el producto en el inventario
                    Producto producto = null;
                    for (Producto p : inventario.getProductos()) {
                        if (p.nombre.equals(nombreProducto)) {
                            producto = p;
                            break;
                        }
                    }

                    if (producto != null) {
                        pedido.agregarProducto(producto, cantidadProducto);
                        respuesta = JOptionPane.showInputDialog("¿Desea agregar otro producto? (S/N):");
                    } else {
                        respuesta = JOptionPane.showInputDialog("Producto no encontrado. ¿Desea intentarlo de nuevo? (S/N):");
                    }

                } while (respuesta != null && respuesta.equalsIgnoreCase("S"));

                // Agregar el pedido al cliente
                cliente.realizarPedido(pedido);

                // Muestra el resultado en el área de texto
                textAreaResultado.append("Pedido agregado para el cliente: " + cliente.nombre + "\n");

                // Actualiza la información de los pedidos al lado
                mostrarPedidosAlLado();
            }
        });

        JButton procesarPedidosButton = new JButton("Procesar Pedidos");
        procesarPedidosButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Mostrar una ventana con la lista de pedidos
                JFrame framePedidos = new JFrame("Lista de Pedidos");
                framePedidos.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

                JTextArea textAreaPedidos = new JTextArea(10, 30);
                JScrollPane scrollPanePedidos = new JScrollPane(textAreaPedidos);

                // Obtener la lista de pedidos
                List<Pedido> pedidos = obtenerPedidos();
                for (Pedido pedido : pedidos) {
                    textAreaPedidos.append("Cliente: " + pedido.getCliente().nombre + "\n");
                    List<ProductoPedido> productosPedidos = pedido.getProductosPedidos();
                    for (ProductoPedido productoPedido : productosPedidos) {
                        textAreaPedidos.append("Producto: " + productoPedido.getProducto().nombre +
                                " - Cantidad: " + productoPedido.getCantidad() + "\n");
                    }
                    textAreaPedidos.append("\n");
                }

                framePedidos.getContentPane().add(scrollPanePedidos);
                framePedidos.pack();
                framePedidos.setVisible(true);
            }
        });

        JButton mostrarInventarioButton = new JButton("Mostrar Inventario");
        mostrarInventarioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Limpia el área de texto antes de mostrar el inventario
                textAreaResultado.setText("");

                // Obtiene la lista de productos del inventario y la muestra en el área de texto
                List<Producto> productos = inventario.getProductos();
                for (Producto producto : productos) {
                    textAreaResultado.append("Nombre: " + producto.nombre +
                            " - Cantidad en inventario: " + producto.cantidadInventario + "\n");
                }
            }
        });

        textAreaResultado = new JTextArea(10, 30);
        JScrollPane scrollPane = new JScrollPane(textAreaResultado);

        // Agregar componentes al panel
        add(agregarProductoButton);
        add(agregarPedidoButton);
        add(procesarPedidosButton);
        add(mostrarInventarioButton);
        add(scrollPane);
    }

    private List<Pedido> obtenerPedidos() {
        // Obtener la lista de pedidos de todos los clientes
        return inventario.getPedidos();
    }

    private void mostrarPedidosAlLado() {
        textAreaResultado.append("----- Pedidos ----- \n");

        // Obtener la lista de pedidos
        List<Pedido> pedidos = obtenerPedidos();
        for (Pedido pedido : pedidos) {
            textAreaResultado.append("Cliente: " + pedido.getCliente().nombre + "\n");
            List<ProductoPedido> productosPedidos = pedido.getProductosPedidos();
            for (ProductoPedido productoPedido : productosPedidos) {
                textAreaResultado.append("Producto: " + productoPedido.getProducto().nombre +
                        " - Cantidad: " + productoPedido.getCantidad() + "\n");
            }
            textAreaResultado.append("\n");
        }

        textAreaResultado.append("-------------------- \n");
    }
}
